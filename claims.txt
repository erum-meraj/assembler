// Eʀᴜᴍ Mᴇʀᴀᴊ
// ʀᴏʟʟ ɴᴏ.: 2201ᴄs24
// Dᴇᴄʟᴀʀᴀᴛɪᴏɴ ᴏғ Aᴜᴛʜᴏʀsʜɪᴘ
// Tʜɪs ᴄᴘᴘ ғɪʟᴇ, ᴀsᴍ.ᴄᴘᴘ, ɪs ᴘᴀʀᴛ ᴏғ ᴛʜᴇ ᴀssɪɢɴᴍᴇɴᴛ ᴏғ CS210 ᴀᴛ ᴛʜᴇ ᴅᴇᴘᴀʀᴛᴍᴇɴᴛ ᴏғ CSE, IIT Pᴀᴛɴᴀ.
Files:
==========
*All the files I submitted, asm.cpp and emu.cpp and claims.txt, have my name and student id at the start, along with a declaration of authorship.

The evidence for Assembler including the output files from the eight test examples has also been uploaded. They are test1(3 output files), test2(3 output files), test3
(3 output file), test4(3 output files), test5(3 output files), test6(3 output files), MyBubbleSort(3 output files). All the test files have been tested and work properly. As for the evidence for the emulator is uploaded
with eight output files in file.TRACE format, for all the same files.

* Submission also includes Report of the project in document and pdf format to provide evidence of the functioning of both assembler and emulator

*Both of my cpp programs did not show any errors and warnings when I compiled it with g++ file.cpp

*Two programs are compilable with g++ asm.cpp -o asm and g++ emu.cpp -o emu.


=============================
Program format and structure:
=============================
1. The assembler:

    * with two data structures to store respectively labels and mnemonic table with expected operands.
    * uses a single routine for both passes.
    * detects label erros.
    * consistent and sensible formatting with sensible program structure. 
    * sensible variable, function & type names with explanatory comments.
		* advanced listing file.
		* assembles test programs.
	  * can implements and demonstrates the instruction SET.

2. The emulator :

    * with two data structures to store respectively memory, mnemonic table with expected operands
    * loads object file, 
    * by giving the instructions like "-befor/-after" , the program can produce memory dump before/after execution.
    * by giving the instruction like "-trace", the program prints the result of program executed.
    * detects errant programs.

